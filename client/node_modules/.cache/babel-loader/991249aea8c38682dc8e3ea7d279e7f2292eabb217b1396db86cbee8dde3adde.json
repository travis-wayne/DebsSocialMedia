{"ast":null,"code":"var _jsxFileName = \"/Users/traviswayne/Documents/GitHub/DebsSocialMedia/client/src/components/Episodecard.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { closePlayer, openPlayer } from '../redux/audioplayerSlice';\nimport { addView } from '../api';\nimport { openSnackbar } from '../redux/snackbarSlice';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 20px;\n    align-items: center;\n    padding: 20px 30px;\n    border-radius: 6px;\n    background-color: ${({\n  theme\n}) => theme.card};\n    cursor: pointer;\n    &:hover{\n        cursor: pointer;\n        transform: translateY(-8px);\n        transition: all 0.4s ease-in-out;\n        box-shadow: 0 0 18px 0 rgba(0, 0, 0, 0.3);\n        filter: brightness(1.3);\n    }\n    @media (max-width: 768px){\n        flex-direction: column; \n        align-items: flex-start;\n      }\n`;\n_c = Card;\nconst Image = styled.img`\n    width: 100px;\n    height: 100px;\n    border-radius: 6px;\n    background-color: ${({\n  theme\n}) => theme.text_secondary};  \n    object-fit: cover;\n`;\n_c2 = Image;\nconst Details = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    width: 100%;\n`;\n_c3 = Details;\nconst Title = styled.div`\n    font-size: 18px;\n    font-weight: 800;\n    color: ${({\n  theme\n}) => theme.text_primary};\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n`;\n_c4 = Title;\nconst Description = styled.div`\n    font-size: 14px;\n    font-weight: 500;\n    color: ${({\n  theme\n}) => theme.text_secondary};\n`;\n_c5 = Description;\nconst ImageContainer = styled.div`\n    position: relative;\n    width: 100px;\n    height: 100px;\n`;\n_c6 = ImageContainer;\nconst Episodecard = ({\n  episode,\n  podid,\n  user,\n  type,\n  index\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const addviewtToPodcast = async () => {\n    await addView(podid._id).catch(err => {\n      dispatch(openSnackbar({\n        message: err.message,\n        type: \"error\"\n      }));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    onClick: async () => {\n      await addviewtToPodcast();\n      if (type === \"audio\") {\n        //open audio player\n        dispatch(openPlayer({\n          type: \"audio\",\n          episode: episode,\n          podid: podid,\n          index: index,\n          currenttime: 0\n        }));\n      } else {\n        //open video player\n        dispatch(dispatch(openPlayer({\n          type: \"video\",\n          episode: episode,\n          podid: podid,\n          index: index,\n          currenttime: 0\n        })));\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(ImageContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        src: podid === null || podid === void 0 ? void 0 : podid.thumbnail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n        style: {\n          position: \"absolute\",\n          top: \"26px\",\n          left: \"26px\",\n          color: \"white\",\n          width: \"50px\",\n          height: \"50px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Details, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: episode.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Description, {\n        children: episode.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(Episodecard, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c7 = Episodecard;\nexport default Episodecard;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"Image\");\n$RefreshReg$(_c3, \"Details\");\n$RefreshReg$(_c4, \"Title\");\n$RefreshReg$(_c5, \"Description\");\n$RefreshReg$(_c6, \"ImageContainer\");\n$RefreshReg$(_c7, \"Episodecard\");","map":{"version":3,"names":["React","useDispatch","styled","closePlayer","openPlayer","addView","openSnackbar","PlayCircleOutlineIcon","jsxDEV","_jsxDEV","Card","div","theme","card","_c","Image","img","text_secondary","_c2","Details","_c3","Title","text_primary","_c4","Description","_c5","ImageContainer","_c6","Episodecard","episode","podid","user","type","index","_s","dispatch","addviewtToPodcast","_id","catch","err","message","onClick","currenttime","children","src","thumbnail","fileName","_jsxFileName","lineNumber","columnNumber","style","position","top","left","color","width","height","name","desc","_c7","$RefreshReg$"],"sources":["/Users/traviswayne/Documents/GitHub/DebsSocialMedia/client/src/components/Episodecard.jsx"],"sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components'\nimport { closePlayer, openPlayer } from '../redux/audioplayerSlice';\nimport { addView } from '../api';\nimport { openSnackbar } from '../redux/snackbarSlice';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\n\nconst Card = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 20px;\n    align-items: center;\n    padding: 20px 30px;\n    border-radius: 6px;\n    background-color: ${({ theme }) => theme.card};\n    cursor: pointer;\n    &:hover{\n        cursor: pointer;\n        transform: translateY(-8px);\n        transition: all 0.4s ease-in-out;\n        box-shadow: 0 0 18px 0 rgba(0, 0, 0, 0.3);\n        filter: brightness(1.3);\n    }\n    @media (max-width: 768px){\n        flex-direction: column; \n        align-items: flex-start;\n      }\n`;\n\nconst Image = styled.img`\n    width: 100px;\n    height: 100px;\n    border-radius: 6px;\n    background-color: ${({ theme }) => theme.text_secondary};  \n    object-fit: cover;\n`;\n\nconst Details = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    width: 100%;\n`;\n\nconst Title = styled.div`\n    font-size: 18px;\n    font-weight: 800;\n    color: ${({ theme }) => theme.text_primary};\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst Description = styled.div`\n    font-size: 14px;\n    font-weight: 500;\n    color: ${({ theme }) => theme.text_secondary};\n`;\nconst ImageContainer = styled.div`\n    position: relative;\n    width: 100px;\n    height: 100px;\n`;\n\n\nconst Episodecard = ({ episode, podid, user, type, index }) => {\n    const dispatch = useDispatch();\n\n    const addviewtToPodcast = async () => {\n        await addView(podid._id).catch((err) => {\n            dispatch(\n                openSnackbar({\n                    message: err.message,\n                    type: \"error\",\n                })\n            );\n        });\n\n    }\n\n    return (\n        <Card onClick={async () => {\n            await addviewtToPodcast();\n            if (type === \"audio\") {\n                //open audio player\n                dispatch(\n                    openPlayer({\n                        type: \"audio\",\n                        episode: episode,\n                        podid: podid,\n                        index: index,\n                        currenttime: 0\n                    })\n                )\n            } else {\n                //open video player\n                dispatch(\n                    dispatch(\n                        openPlayer({\n                            type: \"video\",\n                            episode: episode,\n                            podid: podid,\n                            index: index,\n                            currenttime: 0\n                        })\n                    )\n                )\n            }\n        }}>\n            <ImageContainer>\n                <Image src={podid?.thumbnail} />\n                <PlayCircleOutlineIcon style={{position:\"absolute\",top:\"26px\",left:\"26px\",color:\"white\",width:\"50px\",height:\"50px\"}}/>\n            </ImageContainer>\n            <Details>\n                <Title>{episode.name}</Title>\n                <Description>{episode.desc}</Description>\n            </Details>\n        </Card>\n    )\n}\n\nexport default Episodecard"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}